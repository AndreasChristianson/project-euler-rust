pub fn to_int_sequence<'a>(string: String) -> IntSequence {
    let mut sanitized = string.clone();
    sanitized.retain(|c| r#"1234567890"#.contains(c));
    IntSequence {
        string: sanitized,
        n: 0,
    }
}

pub struct IntSequence {
    string: String,
    n: usize,
}

impl Iterator for IntSequence {
    type Item = u32;

    fn next(&mut self) -> Option<u32> {
        let optional_char = self.string.chars().nth(self.n);
        self.n += 1;
        return optional_char.and_then(|char| char.to_digit(10));
    }
}

#[cfg(test)]
mod number_of_digits_tests {
    use super::to_int_sequence;
    #[test]
    fn small_string() {
        let mut sequence = to_int_sequence("12345".to_string());
        assert_eq!(1, sequence.next().unwrap());
        assert_eq!(2, sequence.next().unwrap());
        assert_eq!(3, sequence.next().unwrap());
        assert_eq!(4, sequence.next().unwrap());
        assert_eq!(5, sequence.next().unwrap());
    }
    #[test]
    fn ignore_non_digit() {
        let mut sequence = to_int_sequence("hello world!!1!".to_string());
        assert_eq!(1, sequence.next().unwrap());
    }

    #[test]
    fn no_digits() {
        let mut sequence = to_int_sequence("hello world!!!".to_string());
        assert!(sequence.next().is_none());
    }
    #[test]
    fn longer_string() {
        let string = r#"
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            more... 1212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
            __9__2121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212
        "#;
        let sequence = to_int_sequence(string.to_string());

        assert_eq!(9, sequence.skip_while(|&n| n <= 3).next().unwrap());
    }
}
